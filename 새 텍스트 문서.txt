from datetime import datetime, timedelta

books = [
    {"title": "�ы뵾�붿뒪", "available": True, "due_date": None, "borrower": None}
]

def rent_book(index):
    book = books[index]
    if book["available"]:
        borrower = input("���ъ옄 �대쫫: ")
        book["available"] = False
        book["due_date"] = datetime.now() + timedelta(days=7)
        book["borrower"] = borrower
        print(f"{book['title']} ���� �꾨즺 / 諛섎궔��: {book['due_date']:%Y-%m-%d}")import tkinter as tk
from datetime import datetime, timedelta

books = [
    {"title": "�ы뵾�붿뒪", "available": True, "due_date": None, "borrower": None}
]

def rent_book(index):
    book = books[index]
    if book["available"]:
        borrower = input("���ъ옄 �대쫫: ")
        book["available"] = False
        book["due_date"] = datetime.now() + timedelta(days=7)
        book["borrower"] = borrower
        print(f"{book['title']} ���� �꾨즺 / 諛섎궔��: {book['due_date']:%Y-%m-%d}")
#梨�  諛섎궔�섎뒗 �⑥닔
def return_book(index):
    book = books[index]
    if not book["available"]:
        book["available"] = True
        book["due_date"] = None
        book["borrower"] = None
        print(f"{book['title']} 諛섎궔 �꾨즺")

def get_visible_books(query):
    return [book for book in books if query.lower() in book["title"].lower()]
#梨� 寃��됲븯�� �⑥닔
def search_books():
    filtered = get_visible_books(entry_search.get())
    print(filtered)

root = tk.Tk()
root.title("�꾩꽌愿� ���� �꾨줈洹몃옩")
root.geometry("700x700")

entry_search = tk.Entry(root)
entry_search.pack()
tk.Button(root, text="寃���", command=search_books).pack()
tk.Button(root, text="珥덇린��", command=lambda: print(books)).pack()

root.mainloop()
# Tkinter濡� GUI �앹꽦, 硫붿떆吏� 諛뺤뒪�� �낅젰李쎌쓣 �꾪븳 紐⑤뱢 遺덈윭�ㅺ린
import tkinter as tk
from tkinter import messagebox, simpledialog
# �대�吏� 泥섎━瑜� �꾪븳 Pillow 紐⑤뱢 遺덈윭�ㅺ린
from PIL import Image, ImageTk
# �좎쭨 怨꾩궛�� �꾪븳 紐⑤뱢
from datetime import datetime, timedelta
# 寃쎈줈 愿��� �⑥닔
import os

# �꾩옱 �ㅽ뻾 以묒씤 �뚯씪�� �붾젆�좊━ 寃쎈줈 援ы븯湲�
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# 湲곕낯 �꾩꽌 �곗씠�� �뺤쓽 (梨� �쒕ぉ, �곹깭, 諛섎궔��, ���ъ옄, �대�吏� 寃쎈줈 �ы븿)
books = [
    {"title": "�ы뵾�붿뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image1.png")},
    {"title": "媛쒕�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image2.png")},
    {"title": "�꾨が��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image3.png")},
    {"title": "�먭린 �욎쓽 ��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image4.png")},
    {"title": "�⑺듃���덉뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image5.png")},
    {"title": "吏�援� �앹쓽 �⑥떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image6.png")},
    {"title": "��뻾��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image7.png")},
    {"title": "�덉쓽 �띿꽦", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image8.png")},
    {"title": "�꾩＜ �щ��� 鍮쏆쑝濡쒕룄", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image9.png")},
    {"title": "泥대━�덉슦: 鍮꾨�湲��낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image10.png")},
    {"title": "肄붿뒪紐⑥뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image11.png")},
    {"title": "吏��� ���붾� �꾪븳 �볤퀬 �뺤� 吏���", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image12.png")},
    {"title": "�섏뼹鍮�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image13.png")},
    {"title": "�댁꽌 �ㅼ꽭��, �대궓�� �쒖젏�낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image14.png")},
    {"title": "媛��� �덉걶 �앷컖�� �덉뿉寃� 二쇨퀬 �띕떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image15.png")},
    {"title": "硫뗭쭊 �좎꽭怨�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image16.png")}
]


# �대�吏� 媛앹껜瑜� 李몄“�� 硫붾え由� �댁젣瑜� 諛⑹��섍린 �꾪븳 由ъ뒪��
image_refs = []

# �꾩옱 �붾㈃�� �쒖떆�� �꾩꽌 紐⑸줉 (寃��� 寃곌낵 諛섏쁺��)
visible_books = books.copy()

# �꾩꽌 由ъ뒪�몃� �낅뜲�댄듃�섏뿬 �붾㈃�� 異쒕젰�섎뒗 �⑥닔
def update_listbox(filtered_books=None):
    global visible_books

    # 湲곗〈 �꾨젅�꾩뿉 �덈뒗 �꾩젽(梨낅뱾)�� 紐⑤몢 �쒓굅
    for widget in frame_list.winfo_children():
        widget.destroy()
    
    image_refs.clear()  # �대�吏� 李몄“ 珥덇린�� (�� �섎㈃ �대�吏� �щ씪吏�)

    # 寃��됰맂 梨� 紐⑸줉�� �덉쑝硫� 諛섏쁺, �꾨땲硫� �꾩껜 梨� �쒖떆
    visible_books = filtered_books if filtered_books else books

    for idx, book in enumerate(visible_books):
        # 媛� 梨� ��ぉ�� �섑��대뒗 �꾨젅�� �앹꽦
        frame = tk.Frame(frame_list, bd=1, relief="solid", padx=10, pady=10, bg="white")
        frame.pack(fill='x', padx=10, pady=5)

        # 梨� �대�吏� 濡쒕뱶 (�놁쑝硫� �뚯깋 諛뺤뒪)
        if os.path.exists(book["image"]):
            img = Image.open(book["image"]).resize((60, 90))
            photo = ImageTk.PhotoImage(img)
        else:
            photo = ImageTk.PhotoImage(Image.new("RGB", (60, 90), color="gray"))

        image_refs.append(photo)  # 李몄“ 由ъ뒪�몄뿉 ����

        # �대�吏� �쒖떆
        tk.Label(frame, image=photo, bg="white").pack(side="left", padx=10)

        # �띿뒪�� 諛� 踰꾪듉 �곸뿭 (�쒕ぉ, �곹깭, ����/諛섎궔 踰꾪듉)
        content = tk.Frame(frame, bg="white")
        content.pack(side="left", fill='x', expand=True)

        # ���� 媛���/遺덇��� �곹깭 �쒖떆
        status = "���� 媛���" if book["available"] else f"{book['borrower']} (諛섎궔: {book['due_date'].strftime('%Y-%m-%d')})"

        # �쒕ぉ怨� �곹깭 異쒕젰
        tk.Label(content, text=book["title"], font=("Arial", 14, "bold"), anchor="w", bg="white").pack(fill='x')
        tk.Label(content, text=status, font=("Arial", 11), fg="gray", anchor="w", bg="white").pack(fill='x', pady=2)

        # ����/諛섎궔 踰꾪듉 異쒕젰
        if book["available"]:
            tk.Button(content, text="�뱴 ����", bg="#2196F3", fg="white", command=lambda i=idx: rent_book(i)).pack(anchor="e")
        else:
            tk.Button(content, text="�뵗 諛섎궔", bg="#9C27B0", fg="white", command=lambda i=idx: return_book(i)).pack(anchor="e")

# 梨� ���� �⑥닔
def rent_book(index):
    book = visible_books[index]
    if book["available"]:
        # ���ъ옄 �대쫫 �낅젰 諛쏄린
        borrower = simpledialog.askstring("���ъ옄 �낅젰", f"'{book['title']}' ���ъ옄 �대쫫��?")
        if borrower:
            book["available"] = False
            book["due_date"] = datetime.now() + timedelta(days=7)  # 諛섎궔 湲고븳�� 7�� ��
            book["borrower"] = borrower
            # 硫붿떆吏� 異쒕젰 諛� UI 媛깆떊
            messagebox.showinfo("���� �꾨즺", f"{book['title']} ���� �꾨즺\n���ъ옄: {borrower}\n諛섎궔��: {book['due_date'].strftime('%Y-%m-%d')}")
            update_listbox(visible_books)

# 梨� 諛섎궔 �⑥닔
def return_book(index):
    book = visible_books[index]
    if not book["available"]:
        book["available"] = True
        book["due_date"] = None
        book["borrower"] = None
        messagebox.showinfo("諛섎궔 �꾨즺", f"{book['title']} 諛섎궔 �꾨즺")
        update_listbox(visible_books)

# 寃��됱뼱�� �곕씪 梨� �꾪꽣留�
def get_visible_books():
    query = entry_search.get().lower().strip()
    if not query:
        return books
    return [book for book in books if query in book["title"].lower()]

# 寃��� 踰꾪듉 �대┃ �� �ㅽ뻾�섎뒗 �⑥닔
def search_books():
    update_listbox(get_visible_books())

# 珥덇린�� 踰꾪듉 �대┃ �� �ㅽ뻾�섎뒗 �⑥닔
def reset_search():
    entry_search.delete(0, tk.END)
    update_listbox()

root = tk.Tk()
root.title("�꾩꽌愿� ���� �꾨줈洹몃옩")
root.geometry("700x700")

# 寃��됱갹 �곸뿭
frame_search = tk.Frame(root)
frame_search.pack(pady=5)

entry_search = tk.Entry(frame_search, width=40)
entry_search.pack(side="left", padx=5)
tk.Button(frame_search, text="寃���", command=search_books).pack(side="left")
tk.Button(frame_search, text="珥덇린��", command=reset_search).pack(side="left", padx=5)

# �ㅽ겕濡� 媛��ν븳 �꾩꽌 由ъ뒪�� �곸뿭
canvas = tk.Canvas(root)
scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

# �꾩꽌 由ъ뒪�� �꾨젅�� (梨� ��ぉ�ㅼ씠 �ш린�� 遺숈쓬)
frame_list = tk.Frame(canvas, bg="white")
canvas_window = canvas.create_window((0, 0), window=frame_list, anchor="nw")

# �덈룄�� �ш린 蹂�寃� �� �대� �꾨젅�� �ш린 �먮룞 議곗젙
def resize_frame(event):
    canvas.itemconfig(canvas_window, width=event.width)

canvas.bind("<Configure>", resize_frame)

# �대� 肄섑뀗痢� �ш린 蹂�寃� �� �ㅽ겕濡� �곸뿭 媛깆떊
frame_list.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# 泥� 濡쒕뵫 �� �꾩꽌 由ъ뒪�� 異쒕젰
update_listbox()

# �꾨줈洹몃옩 醫낅즺 �� 李� �リ린
root.mainloop()
import tkinter as tk
from tkinter import messagebox, simpledialog
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import os
import json

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOOKS_FILE = os.path.join(BASE_DIR, "books_data.json")

# 湲곕낯 梨� 紐⑸줉
default_books = [
    {"title": "�ы뵾�붿뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image1.png")},
    {"title": "媛쒕�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image2.png")},
    {"title": "�꾨が��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image3.png")},
    {"title": "�먭린 �욎쓽 ��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image4.png")},
    {"title": "�⑺듃���덉뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image5.png")},
    {"title": "吏�援� �앹쓽 �⑥떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image6.png")},
    {"title": "��뻾��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image7.png")},
    {"title": "�덉쓽 �띿꽦", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image8.png")},
    {"title": "�꾩＜ �щ��� 鍮쏆쑝濡쒕룄", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image9.png")},
    {"title": "泥대━�덉슦: 鍮꾨�湲��낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image10.png")},
    {"title": "肄붿뒪紐⑥뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image11.png")},
    {"title": "吏��� ���붾� �꾪븳 �볤퀬 �뺤� 吏���", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image12.png")},
    {"title": "�섏뼹鍮�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image13.png")},
    {"title": "�댁꽌 �ㅼ꽭��, �대궓�� �쒖젏�낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image14.png")},
    {"title": "媛��� �덉걶 �앷컖�� �덉뿉寃� 二쇨퀬 �띕떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image15.png")},
    {"title": "硫뗭쭊 �좎꽭怨�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image16.png")}
]

# ���λ맂 �곗씠�� 遺덈윭�ㅺ린
def load_books():
    if not os.path.exists(BOOKS_FILE):
        return default_books
    with open(BOOKS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for book in data:
        if book.get("due_date"):
            book["due_date"] = datetime.strptime(book["due_date"], "%Y-%m-%d")
    return data

def save_books():
    with open(BOOKS_FILE, "w", encoding="utf-8") as f:
        json.dump(books, f, ensure_ascii=False, default=str)

books = load_books()
image_refs = []
visible_books = books.copy()

def update_listbox(filtered_books=None):
    global visible_books
    for widget in frame_list.winfo_children():
        widget.destroy()
    image_refs.clear()

    visible_books = filtered_books if filtered_books else books

    for idx, book in enumerate(visible_books):
        frame = tk.Frame(frame_list, bd=1, relief="solid", padx=10, pady=10, bg="white")
        frame.pack(fill='x', padx=10, pady=5)

        if os.path.exists(book["image"]):
            img = Image.open(book["image"]).resize((60, 90))
            photo = ImageTk.PhotoImage(img)
        else:
            photo = ImageTk.PhotoImage(Image.new("RGB", (60, 90), color="gray"))

        image_refs.append(photo)
        tk.Label(frame, image=photo, bg="white").pack(side="left", padx=10)

        content = tk.Frame(frame, bg="white")
        content.pack(side="left", fill='x', expand=True)

        if book["available"]:
            status = "���� 媛���"
        else:
            status = f"{book['borrower']} (諛섎궔: {book['due_date'].strftime('%Y-%m-%d')})"

        tk.Label(content, text=book["title"], font=("Arial", 14, "bold"), anchor="w", bg="white").pack(fill='x')
        tk.Label(content, text=status, font=("Arial", 11), fg="gray", anchor="w", bg="white").pack(fill='x', pady=2)

        if book["available"]:
            tk.Button(content, text="�뱴 ����", bg="#2196F3", fg="white", command=lambda i=idx: rent_book(i)).pack(anchor="e")
        else:
            tk.Button(content, text="�뵗 諛섎궔", bg="#9C27B0", fg="white", command=lambda i=idx: return_book(i)).pack(anchor="e")

def rent_book(index):
    book = visible_books[index]
    if book["available"]:
        borrower = simpledialog.askstring("���ъ옄 �낅젰", f"'{book['title']}' ���ъ옄 �대쫫��?")
        if borrower:
            book["available"] = False
            book["due_date"] = datetime.now() + timedelta(days=7)
            book["borrower"] = borrower
            save_books()
            messagebox.showinfo("���� �꾨즺", f"{book['title']} ���� �꾨즺\n���ъ옄: {borrower}\n諛섎궔��: {book['due_date'].strftime('%Y-%m-%d')}")
            update_listbox(visible_books)

def return_book(index):
    book = visible_books[index]
    if not book["available"]:
        book["available"] = True
        book["due_date"] = None
        book["borrower"] = None
        save_books()
        messagebox.showinfo("諛섎궔 �꾨즺", f"{book['title']} 諛섎궔 �꾨즺")
        update_listbox(visible_books)

def get_visible_books():
    query = entry_search.get().lower().strip()
    if not query:
        return books
    return [book for book in books if query in book["title"].lower()]

def search_books():
    update_listbox(get_visible_books())

def reset_search():
    entry_search.delete(0, tk.END)
    update_listbox()

# GUI �쒖옉
root = tk.Tk()
root.title("�꾩꽌愿� ���� �꾨줈洹몃옩")
root.geometry("700x700")

# 寃��됱갹
frame_search = tk.Frame(root)
frame_search.pack(pady=5)

entry_search = tk.Entry(frame_search, width=40)
entry_search.pack(side="left", padx=5)
tk.Button(frame_search, text="寃���", command=search_books).pack(side="left")
tk.Button(frame_search, text="珥덇린��", command=reset_search).pack(side="left", padx=5)

# �ㅽ겕濡� �곸뿭
canvas = tk.Canvas(root)
scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

frame_list = tk.Frame(canvas, bg="white")
canvas_window = canvas.create_window((0, 0), window=frame_list, anchor="nw")

def resize_frame(event):
    canvas.itemconfig(canvas_window, width=event.width)

canvas.bind("<Configure>", resize_frame)
frame_list.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

update_listbox()
root.mainloop()
import tkinter as tk
from tkinter import messagebox, simpledialog
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import os
import json

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOOKS_FILE = os.path.join(BASE_DIR, "books_data.json")

# 梨� 遺덈윭�ㅺ린
def load_books():
    if os.path.exists(BOOKS_FILE):
        with open(BOOKS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # 臾몄옄�� -> datetime 蹂듭썝
            for book in data:
                if book["due_date"]:
                    book["due_date"] = datetime.strptime(book["due_date"], "%Y-%m-%d")
            return data
    return books  # �뚯씪 �놁쑝硫� 湲곕낯媛�

# 梨� ���ν븯湲�
def save_books():
    data = []
    for book in books:
        book_copy = book.copy()
        if isinstance(book_copy["due_date"], datetime):
            book_copy["due_date"] = book_copy["due_date"].strftime("%Y-%m-%d")
        data.append(book_copy)
    with open(BOOKS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# 湲곕낯 �꾩꽌 �곗씠�� �뺤쓽 (梨� �쒕ぉ, �곹깭, 諛섎궔��, ���ъ옄, �대�吏� 寃쎈줈 �ы븿)
books = [
    {"title": "�ы뵾�붿뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image1.png")},
    {"title": "媛쒕�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image2.png")},
    {"title": "�꾨が��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image3.png")},
    {"title": "�먭린 �욎쓽 ��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image4.png")},
    {"title": "�⑺듃���덉뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image5.png")},
    {"title": "吏�援� �앹쓽 �⑥떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image6.png")},
    {"title": "��뻾��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image7.png")},
    {"title": "�덉쓽 �띿꽦", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image8.png")},
    {"title": "�꾩＜ �щ��� 鍮쏆쑝濡쒕룄", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image9.png")},
    {"title": "泥대━�덉슦: 鍮꾨�湲��낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image10.png")},
    {"title": "肄붿뒪紐⑥뒪", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image11.png")},
    {"title": "吏��� ���붾� �꾪븳 �볤퀬 �뺤� 吏���", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image12.png")},
    {"title": "�섏뼹鍮�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image13.png")},
    {"title": "�댁꽌 �ㅼ꽭��, �대궓�� �쒖젏�낅땲��", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image14.png")},
    {"title": "媛��� �덉걶 �앷컖�� �덉뿉寃� 二쇨퀬 �띕떎", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image15.png")},
    {"title": "硫뗭쭊 �좎꽭怨�", "available": True, "due_date": None, "borrower": None, "image": os.path.join(BASE_DIR, "book_image", "book_image16.png")}
]


books = load_books()
image_refs = []
visible_books = books.copy()

def update_listbox(filtered_books=None):
    global visible_books
    for widget in frame_list.winfo_children():
        widget.destroy()
    image_refs.clear()

    visible_books = filtered_books if filtered_books else books

    for idx, book in enumerate(visible_books):
        frame = tk.Frame(frame_list, bd=1, relief="solid", padx=10, pady=10, bg="white")
        frame.pack(fill='x', padx=10, pady=5)

        # �대�吏�
        if os.path.exists(book["image"]):
            img = Image.open(book["image"]).resize((60, 90))
            photo = ImageTk.PhotoImage(img)
        else:
            photo = ImageTk.PhotoImage(Image.new("RGB", (60, 90), color="gray"))

        image_refs.append(photo)
        tk.Label(frame, image=photo, bg="white").pack(side="left", padx=10)

        # �띿뒪�� 諛� 踰꾪듉
        content = tk.Frame(frame, bg="white")
        content.pack(side="left", fill='x', expand=True)

        if book["available"]:
            status = "���� 媛���"
        else:
            status = f"{book['borrower']} (諛섎궔: {book['due_date'].strftime('%Y-%m-%d')})"

        tk.Label(content, text=book["title"], font=("Arial", 14, "bold"), anchor="w", bg="white").pack(fill='x')
        tk.Label(content, text=status, font=("Arial", 11), fg="gray", anchor="w", bg="white").pack(fill='x', pady=2)

        if book["available"]:
            tk.Button(content, text="�뱴 ����", bg="#2196F3", fg="white", command=lambda i=idx: rent_book(i)).pack(anchor="e")
        else:
            tk.Button(content, text="�뵗 諛섎궔", bg="#9C27B0", fg="white", command=lambda i=idx: return_book(i)).pack(anchor="e")

def rent_book(index):
    book = visible_books[index]
    if book["available"]:
        borrower = simpledialog.askstring("���ъ옄 �낅젰", f"'{book['title']}' ���ъ옄 �대쫫��?")
        if borrower:
            book["available"] = False
            book["due_date"] = datetime.now() + timedelta(days=7)
            book["borrower"] = borrower
            save_books()
            messagebox.showinfo("���� �꾨즺", f"{book['title']} ���� �꾨즺\n���ъ옄: {borrower}\n諛섎궔��: {book['due_date'].strftime('%Y-%m-%d')}")
            update_listbox(visible_books)

def return_book(index):
    book = visible_books[index]
    if not book["available"]:
        book["available"] = True
        book["due_date"] = None
        book["borrower"] = None
        save_books()
        messagebox.showinfo("諛섎궔 �꾨즺", f"{book['title']} 諛섎궔 �꾨즺")
        update_listbox(visible_books)

def get_visible_books():
    query = entry_search.get().lower().strip()
    if not query:
        return books
    return [book for book in books if query in book["title"].lower()]

def search_books():
    update_listbox(get_visible_books())

def reset_search():
    entry_search.delete(0, tk.END)
    update_listbox()

# GUI �쒖옉
root = tk.Tk()
root.title("�꾩꽌愿� ���� �꾨줈洹몃옩")
root.geometry("700x700")

# 寃��됱갹
frame_search = tk.Frame(root)
frame_search.pack(pady=5)

entry_search = tk.Entry(frame_search, width=40)
entry_search.pack(side="left", padx=5)
tk.Button(frame_search, text="寃���", command=search_books).pack(side="left")
tk.Button(frame_search, text="珥덇린��", command=reset_search).pack(side="left", padx=5)

# �ㅽ겕濡� �곸뿭
canvas = tk.Canvas(root)
scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvas.pack(side="left", fill="both", expand=True)

frame_list = tk.Frame(canvas, bg="white")
canvas_window = canvas.create_window((0, 0), window=frame_list, anchor="nw")

# canvas �ш린�� �곕씪 frame �덈퉬 �숆린��
def resize_frame(event):
    canvas.itemconfig(canvas_window, width=event.width)

canvas.bind("<Configure>", resize_frame)
frame_list.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

update_listbox()
root.protocol("WM_DELETE_WINDOW", lambda: (save_books(), root.destroy()))  # 醫낅즺 �� ����
root.mainloop()